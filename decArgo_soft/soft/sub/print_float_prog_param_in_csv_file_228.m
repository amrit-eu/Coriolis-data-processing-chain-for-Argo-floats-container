% ------------------------------------------------------------------------------
% Print parameter message data in output CSV file.
%
% SYNTAX :
%  print_float_prog_param_in_csv_file_228(a_floatParam1, a_floatParam2)
%
% INPUT PARAMETERS :
%   a_floatParam1 : parameter message data
%   a_floatParam2 : parameter message data dedicated to 3T prototype
%
% OUTPUT PARAMETERS :
%
% EXAMPLES :
%
% SEE ALSO :
% AUTHORS  : Jean-Philippe Rannou (Altran)(jean-philippe.rannou@altran.com)
% ------------------------------------------------------------------------------
% RELEASES :
%   04/22/2024 - RNU - creation
% ------------------------------------------------------------------------------
function print_float_prog_param_in_csv_file_228(a_floatParam1, a_floatParam2)

% current float WMO number
global g_decArgo_floatNum;

% current cycle number
global g_decArgo_cycleNum;

% output CSV file Id
global g_decArgo_outputCsvFileId;


if (isempty(a_floatParam1) && isempty(a_floatParam2))
   return
end

ID_OFFSET = 2;

if (size(a_floatParam1, 1) > 1)
   fprintf('ERROR: Float #%d cycle #%d: BUFFER anomaly (%d param messages #1 in the buffer)\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, ...
      size(a_floatParam1, 1));
elseif (size(a_floatParam1, 1) == 1)
   id = 1;
      
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PARAMETERS PACKET\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum);
   
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; Transmission time of parameters packet; %s\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, julian_2_gregorian_dec_argo(a_floatParam1(id, end)));
   
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PARAM: MISCELLANEOUS\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum);
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; Float time hour; %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 1+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; Float time minute; %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 2+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; Float time second; %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 3+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; Float time gregorian day; %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 4+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; Float time gregorian month; %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 5+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; Float time gregorian year; %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 6+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; => Float time; %s\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, julian_2_gregorian_dec_argo(a_floatParam1(id, end-1)));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; Cycle number (that will use these parameters); %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 7+ID_OFFSET));
   
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PARAM: MISSION PARAMETERS\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum);
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PM0: Number of cycles; %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 8+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PM1: Cycle duration; %d; days\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 9+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PM2: Float reference day; %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 10+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PM3: Expected surface time (hour); %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 11+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PM5: Descent to park sampling time; %d; seconds\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 12+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PM6: Drift at park sampling time; %d; hours\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 13+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PM7: Ascent sampling time; %d; seconds\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 14+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PM8: Park pressure; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 15+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PM9: Profile pressure; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 16+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PM10: Threshold for shallow to intermediate depth zone; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 17+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PM11: Threshold for intermediate to deep depth zone; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 18+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PM12: Slice thickness in surface depth zone; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 19+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PM13: Slice thickness in intermediate depth zone; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 20+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PM14: Slice thickness in deep depth zone; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 21+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PM15: Iridium EOL transmission period; %d; minutes\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 22+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PM16: Iridium second session waiting time; %d; minutes\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 23+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PM17: Post grounding waiting time; %d; minutes\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 24+ID_OFFSET));
   
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PARAM: TECHNICAL PARAMETERS\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum);
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT0: EV max duration on surface; %d; csec\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 25+ID_OFFSET)*10);
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT1: EV max volume during descent and repositioning; %d; cm3\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 26+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT2: Pump max duration during repositioning; %d; csec\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 27+ID_OFFSET)*10);
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT3: Pump max duration during ascent; %d; csec\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 28+ID_OFFSET)*10);
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT4: Pump duration during buoyancy acquisition; %d; csec\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 29+ID_OFFSET)*1000);
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT5: Pressure target tolerance for stabilization; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 30+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT6: Max pressure before emergency ascent; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 31+ID_OFFSET)*10);
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT7: Buoyancy reduction first threshold; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 32+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT8: Buoyancy reduction second threshold; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 33+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT9: Number of out of tolerance pressures before repositioning; %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 34+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT10: Grounding mode (1 = stay grounded, 0 = pressure switch); %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 35+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT11: Min oil volume for grounding detection; %d; cm3\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 36+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT12: Min pressure threshold to switch pressure (in grounding mode 0); %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 37+ID_OFFSET)*10);
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT13: Grounding switch pressure adjustment; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 38+ID_OFFSET)*10);
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT14: Pressure target tolerance during drift; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 39+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT15: Sensor power acquisition mode (1 = continuous, 2 = pulsed); %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 40+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT16: Second profile pressure repetition rate (not used if = 1); %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 41+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT17: Second profile pressure; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 42+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT18: Average descent speed; %d; mm/s\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 43+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT19: Park pressure increment between cycles; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 44+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT20: CTD pump cut-off pressure; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 45+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT21: Optode sensor activation flag; %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 46+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT22: End of ascent pressure; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 47+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT23: Average ascent speed; %d; mm/s\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 48+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT24: Pressure check period during ascent; %d; min\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 49+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT25: Min vertical displacement to detect a stabilization during ascent; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 50+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT26: Pressure check period during descent; %d; min\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 51+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT27: Min vertical displacement to detect a stabilization during descent; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 52+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT28: Min number of unsuccessful GPS acquisition retries before switching off and on the GPS; %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 53+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT29: Hydraulic packets transmission flag; %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 54+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT30: In air acquisition sampling time; %d; seconds\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 55+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT31: In air acquisition phase duration; %d; minutes\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 56+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT32: Pump duration during buoyancy acquisition for in air; %d; csec\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 57+ID_OFFSET)*1000);
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT33: In air acquisition periodicity; %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 58+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT34: Iridium session delay; %d; minutes\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 59+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT35: Internal pressure calibration coeficient #1; %.3f\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 60+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PT36: Internal pressure calibration coeficient #2; %f\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 61+ID_OFFSET));

   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PARAM: ICE DETECTION PARAMETERS\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum);
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PG0: Nb of day without ascent if Ice detected; %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 62+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PG1: Nb of day before ascent even with ice detected; %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 63+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PG2: Start pressure detection; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 64+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PG3: Stop pressure detection; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 65+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PG4: Temperature threshold; %.3f; degC\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 66+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PG5: Slowdown pressure threshold; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 67+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PG6: Pressure acquisition period during ascent (slow speed), once P < IC6; %d; minutes\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 68+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PG7: Pressure delta min before pump action; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 69+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PG8: Pump action duration; %d; csec\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 70+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PG9: GPS timeout; %d; minutes\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 71+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PG10: Delay before ascent blocking detection; %d; minutes\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 72+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PG11: Pressure variation for buoyancy inversion; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 73+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PG12: Volume of valve action volume for buoyancy inversion; %d; cm3\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 74+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PG13: Max volume before grounding detection (while in buoyancy inversion phase); %d; cm3\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 75+ID_OFFSET));

   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PARAM: EXTERNAL SENSORS ACQUISITION\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum);
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #1; PY0: External sensors acquisition flag (0: not used, 1: used); %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam1(id, 76+ID_OFFSET));

end

if (size(a_floatParam2, 1) > 1)
   fprintf('ERROR: Float #%d cycle #%d: BUFFER anomaly (%d param messages #2 in the buffer)\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, ...
      size(a_floatParam2, 1));
elseif (size(a_floatParam2, 1) == 1)
   id = 1;
      
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; PARAMETERS PACKET\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum);
   
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; Transmission time of parameters packet; %s\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, julian_2_gregorian_dec_argo(a_floatParam2(id, end)));
   
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; PARAM: MISCELLANEOUS\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum);
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; Float time hour; %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 1+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; Float time minute; %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 2+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; Float time second; %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 3+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; Float time gregorian day; %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 4+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; Float time gregorian month; %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 5+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; Float time gregorian year; %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 6+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; => Float time; %s\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, julian_2_gregorian_dec_argo(a_floatParam2(id, end-1)));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; Cycle number (that will use these parameters); %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 7+ID_OFFSET));
   
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; PARAM: WAPITI BOARD\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum);
   % fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; FR0: Cycle number; %d\n', ...
   %    g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 8+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; FR1: SBE61 status (0: not activated, 1: activated); %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 9+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; FR2: RBR status (0: not activated, 1: activated); %d\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 10+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; FR3: Offset between SBE41 and RBR sensors (in number of samples at RBR frequency i.e. 4Hz=0.25sec); %d; nb samples\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 11+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; FR4: Offset between SBE41 and SBE61 sensors (in number of samples at SBD61 frequency i.e. 1Hz=1sec); %d; nb samples\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 12+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; FR5: Max delay between SBE41 and SBE61 sensors; %d; msec\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 13+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; FR6: SBE61 pressure offset; %.1f; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 14+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; FR7: SBE61 cut-off pressure; %.1f; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 15+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; FR8: Zone 4 / zone 5 pressure threshold; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 16+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; FR9: Zone 3 / zone 4 pressure threshold; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 17+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; FR10: Zone 2 / zone 3 pressure threshold; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 18+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; FR11: Zone 1 / zone 2 pressure threshold; %d; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 19+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; FR12: Zone 5 slices thickness; %.1f; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 20+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; FR13: Zone 4 slices thickness; %.1f; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 21+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; FR14: Zone 3 slices thickness; %.1f; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 22+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; FR15: Zone 2 slices thickness; %.1f; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 23+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; FR16: Zone 1 slices thickness; %.1f; dbar\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 24+ID_OFFSET));
   % fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; FR17: PT14: Pressure target tolerance during drift; %d; dbar\n', ...
   %    g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 25+ID_OFFSET));
   % fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; FR18: PW7 ?; %d\n', ...
   %    g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 26+ID_OFFSET));
   fprintf(g_decArgo_outputCsvFileId, '%d; %d; Prog #2; FR19: SBE61 sensor warm-up time; %d; msec\n', ...
      g_decArgo_floatNum, g_decArgo_cycleNum, a_floatParam2(id, 27+ID_OFFSET));

end

return
